{"version":3,"sources":["services/event/EventApiBase.ts","services/event/EventService.ts","pages/auth/adm/event/event-list/event-card/EventCard.tsx","pages/auth/adm/event/event-list/event-card/EventCardStyles.ts","pages/auth/adm/event/event-list/EventListPage.tsx"],"names":["EventApiBase","axios","create","baseURL","useEventService","newEvent","useCallback","data","post","editEvent","patch","getEventById","id","console","log","get","getEventAll","EventCard","props","classes","theme","useTheme","makeStyles","eventCardContainer","cursor","width","padding","color","palette","common","black","transition","borderRadius","background","white","primary","main","getClasses","useEventCardStyles","className","onClick","Grid","container","spacing","justifyContent","alignItems","item","style","height","src","foto","Typography","variant","nome","display","EventListPage","useState","Array","eventList","setEventList","history","useHistory","useEffect","then","res","content","xs","md","direction","component","align","map","index","idEvent","push","Button"],"mappings":"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","file":"static/js/15.2dd82eab.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const EventApiBase = axios.create({\r\n    baseURL: 'https://eventocptm.herokuapp.com/'\r\n})","import { useCallback } from \"react\"\r\nimport { EventApiBase } from \"./EventApiBase\"\r\nimport { EventModel } from \"./types/EventModel\"\r\n\r\nexport const useEventService = () => {\r\n\r\n    const newEvent = useCallback((data: EventModel)=>{\r\n        return EventApiBase.post('/event', {\r\n            ...data\r\n        })\r\n    }, [])\r\n\r\n    const editEvent = useCallback((data: EventModel)=>{\r\n        return EventApiBase.patch<{\r\n            content: EventModel\r\n        }>('/event', {\r\n            ...data\r\n        })\r\n    }, [])\r\n\r\n    const getEventById = useCallback((id: string) => {\r\n        console.log(id)\r\n        return EventApiBase.get<{\r\n            content: EventModel\r\n        }>('/event/' + id)\r\n    }, [])\r\n\r\n     const getEventAll = useCallback(() => {\r\n        return EventApiBase.get<{\r\n            content: Array<EventModel>\r\n        }>('/event/')\r\n    }, [])\r\n    \r\n    \r\n    return{\r\n        newEvent,\r\n        getEventById,\r\n        editEvent,\r\n        getEventAll\r\n    }\r\n}\r\n","import { Grid, Typography } from \"@mui/material\"\r\nimport { useEventCardStyles } from \"./EventCardStyles\"\r\nimport { EventCardProps } from \"./types/EventCardProps\"\r\nimport DateRangeIcon from '@mui/icons-material/DateRange';\r\nexport const EventCard = (props: EventCardProps) => {\r\n    const { classes } = useEventCardStyles()\r\n    return (\r\n        <>\r\n            <div className={classes.eventCardContainer} onClick={() => {\r\n                props.onClick()\r\n            }}>\r\n\r\n                <Grid container spacing={2} justifyContent=\"space-around\" alignItems=\"center\">\r\n                    <Grid item>\r\n                        <div>\r\n                            <img style={{\r\n                                height: '50px',\r\n                                width: 'auto'\r\n                            }} src={props.foto} />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item>\r\n                                <Typography variant=\"h6\">\r\n                                    {props.nome}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <DateRangeIcon color=\"primary\" />\r\n                                <Typography variant=\"h6\" display=\"inline\">\r\n                                    {props.data}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { makeStyles } from '@material-ui/styles';\r\nimport { Theme } from \"@mui/material\";\r\nimport { useTheme } from '@mui/system'\r\n\r\nexport const useEventCardStyles = () => {\r\n    const theme = useTheme() as Theme;\r\n    const getClasses = makeStyles(() => ({\r\n        eventCardContainer: {\r\n            cursor: 'pointer',\r\n            width: '100%',\r\n            padding: '10px',\r\n            color: theme.palette.common.black,\r\n            transition: '0.15s all',\r\n            borderRadius: '10px',\r\n            background: '#f3f3f3',\r\n            \"&:hover\": {\r\n                color: theme.palette.common.white,\r\n                background: theme.palette.primary.main\r\n            }\r\n        }\r\n\r\n    }));\r\n\r\n    const classes = getClasses()\r\n    return {\r\n        classes,\r\n    };\r\n};","import { Grid, Typography, Button } from \"@mui/material\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { useEventService } from \"services/event/EventService\"\r\nimport { EventModel } from \"services/event/types/EventModel\"\r\nimport { EventCard } from \"./event-card/EventCard\"\r\n\r\nexport const EventListPage = () => {\r\n    const [eventList, setEventList] = useState<Array<EventModel>>(new Array<EventModel>())\r\n    const history = useHistory()\r\n    const handleClick = (id: string) => {\r\n        history.push('/adm/event/' + id)\r\n    }\r\n    const { getEventAll } = useEventService()\r\n    useEffect(() => {\r\n        getEventAll().then((res) => {\r\n            if (res.data) {\r\n                if (res.data.content) {\r\n                    setEventList([\r\n                        ...res.data.content\r\n                    ])\r\n                }\r\n            }\r\n        })\r\n    }, [])\r\n    return (\r\n        <>\r\n            <Grid container justifyContent=\"center\">\r\n                <Grid item xs={10} md={4}>\r\n                    <Grid container justifyContent=\"center\" direction=\"column\" spacing={2}>\r\n                        <Grid item>\r\n                            <Typography component=\"h1\" variant=\"h3\" align=\"center\" color=\"primary\">\r\n                                Lista de eventos\r\n                            </Typography>\r\n                        </Grid>\r\n                        {\r\n                            eventList.map((item, index) => {\r\n                                return (\r\n                                    <Grid item key={index}>\r\n                                        <EventCard foto={item.foto} nome={item.nome} data={item.data} onClick={() => {\r\n                                            handleClick(item.idEvent)\r\n                                        }} />\r\n                                    </Grid>\r\n                                )\r\n                            })\r\n                        }\r\n                        <Grid item>\r\n                            <Grid container justifyContent=\"center\">\r\n                                <Grid item>\r\n\r\n                                </Grid>\r\n                                <Button variant=\"contained\" onClick={() => {\r\n                                    history.push('/adm/event/new-event')\r\n                                }}>\r\n                                    <Typography>\r\n                                        NOVO EVENTO\r\n                                    </Typography>\r\n                                </Button>\r\n\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </>\r\n    )\r\n}\r\n"],"sourceRoot":""}