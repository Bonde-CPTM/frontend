{"version":3,"sources":["services/event/EventApiBase.ts","services/event/EventService.ts","components/error-box/ErrorBox.tsx","components/inputs/input-default/InputDefault.tsx","services/event/types/EventModel.ts","components/forms/form-feedback/FormFeedback.tsx","services/feedback/FeedbackApiBase.ts","assets/img/logo.png","services/point/PointApiBase.ts","pages/auth/main-page/MainPage.tsx","services/point/PointService.ts","services/feedback/FeedbackService.ts"],"names":["EventApiBase","axios","create","baseURL","useEventService","newEvent","useCallback","data","post","editEvent","patch","getEventById","id","console","log","get","getEventAll","ErrorBox","props","Grid","container","justifyContent","item","Typography","color","message","InputDefault","TextField","EventModel","idEvent","nome","descricao","local","foto","FormFeedback","formik","useFormik","initialValues","idFeedback","categoria","conteudo","onSubmit","values","handleSubmit","spacing","alignItems","xs","fullWidth","type","label","placeholder","error","touched","Boolean","errors","helperText","getFieldProps","Autocomplete","disablePortal","options","value","onChange","e","newValue","setFieldValue","renderInput","params","errorMessage","Button","variant","FeedbackApiBase","PointApiBase","settings","dots","infinite","slidesToShow","arrows","swipe","autoPlay","accessibility","speed","MainPage","theme","useTheme","slider","useHistory","useRef","useState","open","setOpen","openScan","setOpenScan","getItem","useStorageService","getPoints","idLogin","EnumStorageKey","idCliente","postPoints","pontos","usePointService","points","setPoints","useEffect","then","res","content","activeIndex","setActiveIndex","sendFeedback","getCategorias","event","setEvent","handleCLickCardEvent","status","current","slickGoTo","setEventListAll","length","setEventList","slice","Array","eventList","eventListAll","style","width","background","position","top","zIndex","display","marginTop","marginRight","onClick","ref","src","Logo","alt","direction","map","index","md","Card","CardActionArea","CardMedia","component","height","image","CardContent","gutterBottom","align","marginBottom","palette","primary","main","padding","borderRadius","fontWeight","maxWidth","maxHeight","bottom","BottomNavigation","showLabels","BottomNavigationAction","icon","Modal","onClose","Box","mt","onUpdate","err","result","alert","model"],"mappings":"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","file":"static/js/13.a43b49b7.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const EventApiBase = axios.create({\r\n    baseURL: 'https://evento-bondecptm.herokuapp.com/'\r\n})","import { useCallback } from \"react\"\r\nimport { EventApiBase } from \"./EventApiBase\"\r\nimport { EventModel } from \"./types/EventModel\"\r\n\r\nexport const useEventService = () => {\r\n\r\n    const newEvent = useCallback((data: EventModel)=>{\r\n        return EventApiBase.post('/event', {\r\n            ...data\r\n        })\r\n    }, [])\r\n\r\n    const editEvent = useCallback((data: EventModel)=>{\r\n        return EventApiBase.patch<{\r\n            content: EventModel\r\n        }>('/event', {\r\n            ...data\r\n        })\r\n    }, [])\r\n\r\n    const getEventById = useCallback((id: string) => {\r\n        console.log(id)\r\n        return EventApiBase.get<{\r\n            content: EventModel\r\n        }>('/event/' + id)\r\n    }, [])\r\n\r\n     const getEventAll = useCallback(() => {\r\n        return EventApiBase.get<{\r\n            content: Array<EventModel>\r\n        }>('/event/')\r\n    }, [])\r\n    \r\n    \r\n    return{\r\n        newEvent,\r\n        getEventById,\r\n        editEvent,\r\n        getEventAll\r\n    }\r\n}\r\n","import { Grid, Typography } from \"@mui/material\"\r\nimport { ErrorBoxProps } from \"./types/ErrorBoxProps\"\r\n\r\nexport const ErrorBox = (props: ErrorBoxProps) => {\r\n    return (\r\n        <>\r\n            <Grid container justifyContent=\"center\">\r\n                <Grid item>\r\n                    <Typography color=\"error\">\r\n                        {props.message}\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n","import { TextField, TextFieldProps } from \"@mui/material\"\r\n\r\nexport const InputDefault = (props: TextFieldProps) => {\r\n    return (\r\n        <>\r\n            <TextField {...props} />\r\n        </>\r\n    )\r\n}\r\n","export class EventModel{\r\n\r\n    constructor(\r\n        public idEvent: string = '',\r\n        public nome: string = '',\r\n        public descricao: string = '',\r\n        public local: string = '',\r\n        public data: string = '',\r\n        public foto: string = ''\r\n    ){}\r\n}","import { Autocomplete, Button, Grid, TextField } from \"@mui/material\"\r\nimport { ErrorBox } from \"components/error-box\"\r\nimport { InputDefault } from \"components/inputs/input-default\"\r\nimport { useFormik } from \"formik\"\r\nimport { FormFeedbackProps } from \"./types/FormFeedbackProps\"\r\n\r\nexport const FormFeedback = (props: FormFeedbackProps) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            idFeedback: \"\",\r\n            categoria: \"\",\r\n            conteudo: \"\"\r\n        },\r\n        onSubmit: (values) => {\r\n            console.log(values)\r\n            props.onSubmit(values)\r\n        }\r\n    })\r\n    return (\r\n        <>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Grid container spacing={2} justifyContent=\"center\" alignItems=\"center\">\r\n                    <Grid item xs={12}>\r\n                        <InputDefault\r\n                            fullWidth\r\n                            type=\"\"\r\n                            label=\"Mensagem\"\r\n                            placeholder=\"Digite sua mensagem\"\r\n                            error={formik.touched.conteudo && Boolean(formik.errors.conteudo)}\r\n                            helperText={formik.touched.conteudo && formik.errors.conteudo}\r\n                            {...formik.getFieldProps('conteudo')} />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Autocomplete\r\n                            disablePortal\r\n                            id=\"combo-box-demo\"\r\n                            options={['Elogio', 'Ocorrencia', 'Reclamacao', 'Sugestao', 'Outros']}\r\n                            value={formik.values.categoria}\r\n                            onChange={(e, newValue) => {\r\n                                formik.setFieldValue('categoria', newValue)\r\n                            }}\r\n                            renderInput={(params) => <TextField {...params} fullWidth label=\"Tipo\" />}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        {\r\n                            props.errorMessage ? (\r\n                                <ErrorBox message={props.errorMessage} />\r\n                            ) : null\r\n                        }\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                            Enviar\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport const FeedbackApiBase = axios.create({\r\n    baseURL: 'https://feedback-bondecptm.herokuapp.com/'\r\n})","export default __webpack_public_path__ + \"static/media/logo.c0649b1f.png\";","import axios from \"axios\";\r\n\r\nexport const PointApiBase = axios.create({\r\n    baseURL: 'https://ponto-bondecptm.herokuapp.com/'\r\n})","import { BottomNavigation, Button, BottomNavigationAction, Typography, Grid, Card, CardActionArea, CardMedia, CardContent, Modal, Box } from \"@mui/material\";\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport EventAvailableIcon from '@mui/icons-material/EventAvailable';\r\nimport TrainIcon from '@mui/icons-material/Train';\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport Slider from \"react-slick\";\r\nimport 'assets/css/slick.min.css'\r\nimport { EventModel } from \"services/event/types/EventModel\";\r\nimport { useEventService } from \"services/event/EventService\";\r\nimport AnnouncementIcon from '@mui/icons-material/Announcement';\r\nimport { FeedbackModel } from \"services/feedback/types/FeedbackModel\";\r\nimport { FormFeedback } from \"components/forms/form-feedback/FormFeedback\";\r\nimport { useFeedbackService } from \"services/feedback/FeedbackService\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport QrCodeIcon from '@mui/icons-material/QrCode';\r\nimport BarcodeScannerComponent from \"react-qr-barcode-scanner\";\r\nimport Logo from 'assets/img/logo.png'\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport { usePointService } from \"services/point/PointService\";\r\nimport { Theme } from \"@mui/material\";\r\nimport { useTheme } from '@mui/system'\r\n\r\nconst settings = {\r\n    dots: false,\r\n    infinite: false,\r\n    slidesToShow: 1,\r\n    arrows: false,\r\n    swipe: false,\r\n    autoPlay: false,\r\n    accessibility: false,\r\n    speed: 100,\r\n};\r\n\r\nexport const MainPage = () => {\r\n    const theme = useTheme() as Theme\r\n    const history = useHistory()\r\n    const slider = useRef<any>()\r\n    const [open, setOpen] = useState(false)\r\n    const [openScan, setOpenScan] = useState(false)\r\n    const { getPoints, postPoints } = usePointService()\r\n    const [ points, setPoints ] = useState('0')\r\n    useEffect(()=>{\r\n        getPoints().then((res)=>{\r\n            setPoints(res.data.content.pontos)\r\n        })\r\n    }, [])\r\n    const [activeIndex, setActiveIndex] = useState(0)\r\n    const { getEventAll, getEventById } = useEventService()\r\n    const { sendFeedback } = useFeedbackService()\r\n    const [event, setEvent] = useState<EventModel>(new EventModel())\r\n    const handleSubmitFeedback = (model: FeedbackModel) => {\r\n        sendFeedback(model).then((res) => {\r\n            if (res.status === 201 || res.status === 200)\r\n                setOpen(false)\r\n        })\r\n    }\r\n    const handleCLickCardEvent = (id: string) => {\r\n        getEventById(id).then((res) => {\r\n            if (res.status === 200 || res.status === 204) {\r\n                setEvent(res.data.content)\r\n                setActiveIndex(4)\r\n            }\r\n        })\r\n    }\r\n    useEffect(() => {\r\n        if (slider.current) {\r\n            slider.current.slickGoTo(activeIndex)\r\n        }\r\n    }, [activeIndex])\r\n\r\n    useEffect(() => {\r\n        getEventAll().then((res) => {\r\n            console.log(res)\r\n            if (res.data) {\r\n                if (res.data.content) {\r\n                    setEventListAll(res.data.content)\r\n                    if (res.data.content.length > 3) {\r\n                        setEventList(res.data.content.slice(0, 3))\r\n                    } else {\r\n                        setEventList(res.data.content)\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }, [getEventAll])\r\n    const [eventList, setEventList] = useState<Array<EventModel>>(new Array<EventModel>())\r\n    const [eventListAll, setEventListAll] = useState<Array<EventModel>>(new Array<EventModel>())\r\n\r\n    return (\r\n        <>\r\n            <div style={{\r\n                width: '100vw',\r\n                background: '#fff',\r\n                position: 'fixed',\r\n                top: 0,\r\n                zIndex: 10,\r\n                display: 'flex',\r\n                justifyContent: 'flex-end'\r\n            }}>\r\n                <div style={{\r\n                    marginTop: '5px',\r\n                    marginRight: '15px'\r\n                }}>\r\n                    <Button variant=\"contained\" onClick={() => {\r\n                        setOpen(true)\r\n                    }}>\r\n                        <AnnouncementIcon />\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div style={{\r\n                marginTop: '45px',\r\n            }}>\r\n                <Slider {...settings} ref={slider}>\r\n                    <div>\r\n                        <Grid container justifyContent=\"center\">\r\n                            <Grid item>\r\n                                <img src={Logo} alt=\"Logo Bonde CPTM\" />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container alignItems=\"center\" direction=\"column\" spacing={2} style={{\r\n                            marginTop: '30px'\r\n                        }}>\r\n                            <Grid item>\r\n                                <Typography variant=\"h5\">\r\n                                    Eventos\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Grid container>\r\n                                    {\r\n                                        eventList.map((item, index) => {\r\n                                            return (\r\n                                                <Grid item md={6} xs={12} key={index}>\r\n                                                    <div onClick={() => {\r\n                                                        handleCLickCardEvent(item.idEvent)\r\n                                                    }}>\r\n                                                        <Card>\r\n                                                            <CardActionArea>\r\n                                                                <CardMedia\r\n                                                                    component=\"img\"\r\n                                                                    height=\"140\"\r\n                                                                    image={item.foto}\r\n                                                                    alt=\"green iguana\"\r\n                                                                />\r\n                                                                <CardContent>\r\n                                                                    <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                                                        {item.nome}\r\n                                                                    </Typography>\r\n                                                                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                                                        {item.descricao}\r\n                                                                    </Typography>\r\n                                                                </CardContent>\r\n                                                            </CardActionArea>\r\n                                                        </Card>\r\n                                                    </div>\r\n                                                </Grid>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                    <div>\r\n                        <Typography variant=\"h4\" align=\"center\" style={{\r\n                            marginBottom: '20px',\r\n                        }}>\r\n                            Eventos\r\n                        </Typography>\r\n\r\n                        <Grid container>\r\n                            {\r\n                                eventListAll.map((item, index) => {\r\n                                    return (\r\n                                        <Grid item md={6} xs={12} key={index}>\r\n                                            <div onClick={() => {\r\n                                                handleCLickCardEvent(item.idEvent)\r\n                                            }}>\r\n                                                <Card>\r\n                                                    <CardActionArea>\r\n                                                        <CardMedia\r\n                                                            component=\"img\"\r\n                                                            height=\"140\"\r\n                                                            image={item.foto}\r\n                                                            alt=\"green iguana\"\r\n                                                        />\r\n                                                        <CardContent>\r\n                                                            <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                                                {item.nome}\r\n                                                            </Typography>\r\n                                                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                                                {item.descricao}\r\n                                                            </Typography>\r\n                                                        </CardContent>\r\n                                                    </CardActionArea>\r\n                                                </Card>\r\n                                            </div>\r\n                                        </Grid>\r\n                                    )\r\n                                })\r\n                            }\r\n\r\n\r\n                        </Grid>\r\n                    </div>\r\n                    <div>\r\n                        <div style={{\r\n                            \r\n                        }}>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div>\r\n                            <Grid container justifyContent=\"center\">\r\n                                <Grid item md={6} xs={10}>\r\n                                    <div style={{\r\n                                        display: 'flex',\r\n                                        background: theme.palette.primary.main,\r\n                                        color: 'white',\r\n                                        justifyContent: 'center',\r\n                                        padding: '20px',\r\n                                        marginTop: '30px',\r\n                                        borderRadius: '20px'\r\n                                    }}>\r\n\r\n                                        <Typography >\r\n                                            Você possui <br />\r\n                                            <span style={{\r\n                                                fontWeight: 'bold'\r\n                                            }}>\r\n                                                {points} pontos\r\n                                            </span>\r\n                                        </Typography>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <Grid container justifyContent=\"center\" direction=\"column\" spacing={2}>\r\n                            <Grid item xs={10}>\r\n                                <Grid container justifyContent=\"center\">\r\n                                    <Grid item>\r\n                                        <img style={{\r\n                                            maxWidth: '100%',\r\n                                            maxHeight: '200px',\r\n\r\n                                        }} src={event.foto} />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <Typography variant=\"h5\" align=\"center\">\r\n                                    {event.nome}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <Typography variant=\"h5\" align=\"center\">\r\n                                    {event.local}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <Typography variant=\"h5\" align=\"center\">\r\n                                    {event.data}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <Typography variant=\"h5\" align=\"center\">\r\n                                    {event.descricao}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <Grid container justifyContent=\"center\">\r\n                                    <Grid item>\r\n                                        <Button onClick={() => {\r\n                                            setOpenScan(true)\r\n                                        }} variant=\"contained\" color=\"primary\">\r\n                                            <QrCodeIcon style={{\r\n                                                marginRight: '10px'\r\n                                            }} />\r\n                                            Marcar presença\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n\r\n                </Slider>\r\n            </div>\r\n\r\n            <div style={{\r\n                position: 'fixed',\r\n                bottom: 0,\r\n                width: '100vw',\r\n            }}>\r\n                <BottomNavigation\r\n                    showLabels\r\n                    value={activeIndex}\r\n                    onChange={(event, newValue) => {\r\n                        setActiveIndex(newValue);\r\n                    }}\r\n                >\r\n                    <BottomNavigationAction onClick={() => {\r\n                        setActiveIndex(0)\r\n                    }} label=\"Home\" icon={<HomeIcon />} />\r\n                    <BottomNavigationAction onClick={() => {\r\n                        setActiveIndex(1)\r\n                    }} label=\"Eventos\" icon={<EventAvailableIcon />} />\r\n                    <BottomNavigationAction onClick={() => {\r\n                        setActiveIndex(2)\r\n                    }} label=\"Trens\" icon={<TrainIcon />} />\r\n                    <BottomNavigationAction onClick={() => {\r\n                        setActiveIndex(3)\r\n                    }} label=\"Perfil\" icon={<PersonIcon />} />\r\n                </BottomNavigation>\r\n            </div>\r\n            {\r\n                openScan ? (\r\n                    <Modal\r\n                        open={openScan}\r\n                        onClose={() => {\r\n                            setOpenScan(false)\r\n                        }}\r\n                        aria-labelledby=\"modal-modal-title\"\r\n                        aria-describedby=\"modal-modal-description\"\r\n                    >\r\n                        <Box mt={5}>\r\n                            <Grid container justifyContent=\"center\">\r\n                                <Grid item md={6} xs={10} style={{\r\n                                    background: '#fff',\r\n                                    padding: '30px',\r\n                                    borderRadius: '20px',\r\n                                }}>\r\n                                    <BarcodeScannerComponent\r\n                                        width={'100%'}\r\n                                        onUpdate={(err, result) => {\r\n                                            if (result) {\r\n                                                postPoints().then((res)=>{\r\n                                                    if(res.status === 200 || res.status === 204){\r\n                                                        setPoints(res.data.content.pontos)\r\n                                                        setOpenScan(false)\r\n                                                        alert('Sucesso ao verificar o código')\r\n                                                    }\r\n                                                })\r\n                                            }\r\n                                            else {\r\n\r\n                                            }\r\n                                        }}\r\n                                    />\r\n\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Modal>\r\n                ) : null\r\n            }\r\n\r\n            <Modal\r\n                open={open}\r\n                onClose={() => {\r\n                    setOpen(false)\r\n                }}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box mt={5}>\r\n                    <Grid container justifyContent=\"center\">\r\n                        <Grid md={6} xs={10} style={{\r\n                            background: '#fff',\r\n                            padding: '30px',\r\n                            borderRadius: '20px',\r\n                        }}>\r\n                            <Typography variant=\"h5\" align=\"center\" style={{\r\n                                marginBottom: '20px'\r\n                            }}>\r\n                                Enviar feedback\r\n                            </Typography>\r\n                            <FormFeedback onSubmit={handleSubmitFeedback} />\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n","import { useStorageService } from \"hooks/storage-service\"\r\nimport { EnumStorageKey } from \"hooks/storage-service/types/EnumStorageKeys\"\r\nimport { useCallback } from \"react\"\r\nimport { PointApiBase } from \"./PointApiBase\"\r\n\r\nexport const usePointService = () => {\r\n    const { getItem } = useStorageService()\r\n    const getPoints = useCallback(() => {\r\n        const idLogin = getItem(EnumStorageKey.idCliente)\r\n        return PointApiBase.get<{\r\n            content: {\r\n                idLogin: string,\r\n                pontos: string\r\n            }\r\n        }>('/point/' + idLogin)\r\n    }, [])\r\n\r\n    const postPoints = useCallback(() => {\r\n        const idLogin = getItem(EnumStorageKey.idCliente)\r\n        return PointApiBase.post<{\r\n            content: {\r\n                idLogin: string,\r\n                pontos: string\r\n            }\r\n        }>('/point/',{\r\n            pontos: '8',\r\n            idLogin: idLogin\r\n        })\r\n    }, [])\r\n    return {\r\n        getPoints,\r\n        postPoints\r\n    }\r\n}\r\n","import { useCallback } from \"react\"\r\nimport { FeedbackApiBase } from \"./FeedbackApiBase\"\r\nimport { FeedbackModel } from \"./types/FeedbackModel\"\r\n\r\nexport const useFeedbackService = () =>{\r\n    const sendFeedback = useCallback((data: FeedbackModel)=>{\r\n        return FeedbackApiBase.post<{content: FeedbackModel}>('/feedback', {\r\n            ...data\r\n        })\r\n    }, [])\r\n    const getCategorias = useCallback((data: FeedbackModel)=>{\r\n        return FeedbackApiBase.get<{content: FeedbackModel}>('/feedback/categoria')\r\n    }, [])\r\n\r\n    return{\r\n        sendFeedback,\r\n        getCategorias\r\n    }\r\n}"],"sourceRoot":""}